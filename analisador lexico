import ply.lex as lex
import ply.yacc as yacc

# Definição dos tokens
tokens = (
    'NUMBER',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'LPAREN',
    'RPAREN',
    'ID',  # Adicionando o token ID
)

# Expressões regulares para tokens simples
t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_LPAREN = r'\('
t_RPAREN = r'\)'

# Expressão regular para identificadores
def t_ID(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    t.type = reserved.get(t.value, 'ID')  # Verifica se é uma palavra reservada
    return t

# Token para números
def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

# Tratamento de erro
def t_error(t):
    print(f"Caractere não reconhecido: '{t.value[0]}'")
    t.lexer.skip(1)

# Lista de palavras reservadas
reserved = {
    'if': 'IF',
    'else': 'ELSE',
    # Adicione outras palavras reservadas aqui
}

# Criação do analisador léxico
lexer = lex.lex()

# Definição das regras gramaticais
def p_expression(p):
    '''expression : expression PLUS expression
                  | expression MINUS expression
                  | term
                  | ID'''  # Incluímos 'ID' como uma opção
    if len(p) == 4:
        if p[2] == '+':
            p[0] = p[1] + p[3]
        else:
            p[0] = p[1] - p[3]
    else:
        p[0] = p[1]

def p_term(p):
    '''term : term TIMES factor
            | term DIVIDE factor
            | factor'''
    if len(p) == 4:
        if p[2] == '*':
            p[0] = p[1] * p[3]
        else:
            p[0] = p[1] / p[3]
    else:
        p[0] = p[1]

def p_factor(p):
    '''factor : NUMBER
              | LPAREN expression RPAREN
              | ID'''  # Incluímos 'ID' como uma opção
    if len(p) == 2:
        if isinstance(p[1], int):
            p[0] = p[1]
        else:
            # Tratamos 'ID' como uma variável (pode ser uma tabela de símbolos)
            p[0] = 0  # Substitua isso pelo valor real da variável
    else:
        p[0] = p[2]

def p_error(p):
    print("Erro de sintaxe")

# Criação do analisador sintático
parser = yacc.yacc()

# Função para avaliar expressões
def evaluate(expression):
    try:
        result = parser.parse(expression)
        if result is not None:
            print("A cadeia pertence à linguagem")
        else:
            print("A cadeia não pertence à linguagem")
    except Exception as e:
        print(f"Erro: {e}")

# Exemplo de uso
if __name__ == '__main__':
    while True:
        try:
            expression = input("Digite uma expressão aritmética: ")
            if expression == 'exit':
                break
            evaluate(expression)
        except Exception as e:
            print(f"Erro: {e}")

    print("Programa encerrado.")

